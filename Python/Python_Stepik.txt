''' Требуется определить, является ли данный год високосным. Напомним, что високосными годами считаются те годы, порядковый номер которых либо кратен 4, но при этом не кратен 100, либо кратен 400 (например, 2000-й год являлся високосным, а 2100-й будет невисокосным годом).
 Программа должна корректно работать на числах 1900≤n≤3000. Выведите "Високосный" в случае, если считанный год является високосным и "Обычный" в обратном случае (не забывайте проверять регистр выводимых программой символов).'''
if 1900<=y<=3000:
    a=int(input())
    if a%4==0 and (a%400==0 or a%100!=0):
        print('Високосный')
    else:
        print('Обычный')


''' Напишите простой калькулятор, который считывает с пользовательского ввода три строки: первое число, второе число и операцию, после чего применяет операцию к введённым числам ("первое число" "операция" "второе число") и выводит результат на экран.
Поддерживаемые операции: +, -, /, *, mod, pow, div, где
mod — это взятие остатка от деления,
pow — возведение в степень,
div — целочисленное деление.
Если выполняется деление и второе число равно 0, необходимо выводить строку "Деление на 0!". Обратите внимание, что на вход программе приходят вещественные числа.'''
a=float(input())
b=float(input())
c=input()
if c in('+','-','/','*','mod','pow','div'):
    if c=='+':
        print(a+b)
    elif c=='-':
        print(a-b)
    elif c=='/':
        if b==0:
            print('Деление на 0!')
        else:
            print(a/b)
    elif c=='*':
        print(a*b)
    elif c=='mod':
        if b==0:
            print('Деление на 0!')
        else:
            print(a%b)
    elif c=='pow':
        print(a**b)
    elif c=='div':
        if b==0:
            print('Деление на 0!')
        else:
            print(a//b)


''' Требуется написать программу, на вход которой подаётся тип фигуры комнаты и соответствующие параметры, которая бы выводила площадь получившейся комнаты.
Число π считать за 3.14'''
f=input()
if f=='треугольник':
    a,b,c=int(input()),int(input()),int(input())
    p=(a+b+c)/2
    print((p*(p-a)*(p-b)*(p-c))**0.5)
elif f=='прямоугольник':
    a,b=int(input()),int(input())
    print(a*b)
elif f=='круг':
    a=int(input())
    print(3.14*a**2)


''' Напишите программу, которая получает на вход три целых числа, по одному числу в строке, и выводит на консоль в три строки сначала максимальное, потом минимальное, после чего оставшееся число.
На ввод могут подаваться и повторяющиеся числа.'''
a,b,c=int(input()),int(input()),int(input())
if a>=b>=c:
    print(a,'\n',c,'\n',b)
elif b>=a>=c:
    print(b,'\n',c,'\n',a)
elif b>=c>=a:
    print(b,'\n',a,'\n',c)
elif a>=c>=b:
    print(a,'\n',b,'\n',c)
elif c>=b>=a:
    print(c,'\n',a,'\n',b)
elif c>=a>=b:
    print(c,'\n',b,'\n',a)

# вариант интереснее:
a, b, c = int(input()), int(input()), int(input())
max_int = max(a, b, c)
min_int = min(a, b, c)
print(max_int)
print(min_int)
print((a + b + c) - max_int - min_int)

# через сортировку:
x=sorted([int(input()),int(input()),int(input())])
print (x[2], x[0], x[1], sep="\n")

''' Напишите программу, считывающую с пользовательского ввода целое число nn (неотрицательное), выводящее это число в консоль вместе с правильным образом изменённым словом "программист". 
Например: 1 программист, 2 программиста, 5 программистов.В комнате может быть очень много программистов. Проверьте, что ваша программа правильно обработает все случаи, как минимум до 1000 человек.'''

a=int(input())
if 5<=a%100<=19 or 5<=a%10<=9 or a%10==0:
    print(a,'программистов')
elif 2<=a%10<=4:
    print(a,'программиста')
elif a%10==1 or a%100==11:
    print(a,'программист')

''' Паша очень любит кататься на общественном транспорте, а получая билет, сразу проверяет, счастливый ли ему попался. 
Билет считается счастливым, если сумма первых трех цифр совпадает с суммой последних трех цифр номера билета.
Нужно написать программу, которая проверит равенство сумм и выведет "Счастливый", если суммы совпадают, и "Обычный", если суммы различны.
На вход программе подаётся строка из шести цифр. Выводить нужно только слово "Счастливый" или "Обычный", с большой буквы.'''
a=input()
print('Счастливый'if (int(a[0])+int(a[1])+int(a[2]))==(int(a[3])+int(a[4])+int(a[5])) else 'Обычный')


''' Напишите программу, которая считывает со стандартного ввода целые числа, по одному числу в строке, и после первого введенного нуля выводит сумму полученных на вход чисел.'''
s=0
a=1
while a:
    a=int(input())
    s+=a
print(s)

''' Напишите программу, которая считывает с клавиатуры два числа aa и bb, считает и выводит на консоль среднее арифметическое всех чисел из отрезка [a; b][a;b], которые кратны числу 3.'''
a,b=int(input()), int(input())
c,d=0,0
if a%3==1:
    a+=2
elif a%3==2:
    a+=1
for i in range(a,b+1,3):
    c+=i
    d+=1
print(c/d)

''' студенты группы информатиков предложили использовать алгоритм сжатия, который сжимает повторяющиеся символы в строке.
Кодирование осуществляется следующим образом:
s = 'aaaabbсaa' преобразуется в 'a4b2с1a2', то есть группы одинаковых символов исходной строки заменяются на этот символ и количество его повторений в этой позиции строки.
Напишите программу, которая считывает строку, кодирует её предложенным алгоритмом и выводит закодированную последовательность на стандартный вывод. Кодирование должно учитывать регистр символов.'''
dnk = input()
n = 0
l = dnk[0]
for i in dnk:
    if l == i:
        n += 1
    else:
        print(l + str(n), end="")
        l = i
        n = 1
print(l + str(n))


''' Напишите программу, на вход которой подаётся список чисел одной строкой. Программа должна для каждого элемента этого списка вывести сумму двух его соседей. 
Для элементов списка, являющихся крайними, одним из соседей считается элемент, находящий на противоположном конце этого списка. Например, если на вход подаётся список "1 3 5 6 10", то на выход ожидается список "13 6 9 15 7" (без кавычек).
Если на вход пришло только одно число, надо вывести его же. Вывод должен содержать одну строку с числами нового списка, разделёнными пробелом.'''

a=[int(i)for i in input().split()]
if len(a)>1:
    for i in range(len(a)):
        if i==(len(a)-1):
            b=int(a[i-1])+int(a[0])
            print(b)
        else:
            b=int(a[i-1])+int(a[i+1])
            print(b,end=' ')
else:
    print(int(a[0]))


''' Напишите программу, на вход которой подаётся прямоугольная матрица в виде последовательности строк. После последней строки матрицы идёт строка, содержащая только строку "end" (без кавычек, см. Sample Input).
Программа должна вывести матрицу того же размера, у которой каждый элемент в позиции i, j равен сумме элементов первой матрицы на позициях (i-1, j), (i+1, j), (i, j-1), (i, j+1). 
У крайних символов соседний элемент находится с противоположной стороны матрицы. В случае одной строки/столбца элемент сам себе является соседом по соответствующему направлению.'''

a=[]
b=[int(i) for i in input().split()]

try:
  while b!=['end']:
    a.append(b)
    b=[int(i) for i in input().split()]
except ValueError:
  di=0
  dj=0
  b=[[0 for j in range(len(a[0]))] for i in range(len(a))]
for i in range(len(a)):    # кол-во строк
    for j in range(len(a[0])):    # кол-во столбцов
        for di in range(-1,2,2): # верх-низ
          if (i+di)<len(a):
            b[i][j]+=a[i+di][j]
          else: b[i][j]+=a[0][j]
        for dj in range (-1,2,2):  # лево-право
          if (j+dj)<len(a[0]):
            b[i][j]+=a[i][j+dj]
          else: b[i][j]+=a[i][0]
        print(b[i][j],end=' ')
    print()

''' Напишите функцию modify_list(l), которая принимает на вход список целых чисел, удаляет из него все нечётные значения, а чётные нацело делит на два. Функция не должна ничего возвращать. 
Требуется только изменение переданного списка'''
def modify_list(l):
    l[:] = [i//2 for i in l if i%2==0]


''' Напишите функцию update_dictionary(d, key, value), которая принимает на вход словарь dd и два числа: keykey и valuevalue.

Если ключ key есть в словаре d, то добавьте значение value в список, который хранится по этому ключу.
Если ключа key нет в словаре, то нужно добавить значение в список по ключу 2 * key. 
Если и ключа 2 * key нет, то нужно добавить ключ 2 * key в словарь и сопоставить ему список из переданного элемента [value].'''
def update_dictionary(d, key, value):
    if key in d:
        d[key] += [value]
    elif key*2 in d:
        d[key*2] += [value]
    else:
        d[key*2] = [value]

''' Напишите программу, которая считывает строку с числом nn, которое задаёт количество чисел, которые нужно считать. Далее считывает n строк с числами x, по одному числу в каждой строке.
При считывании числа x, программа должна на отдельной строке вывести значение f(x). Функция f(x) уже реализована и доступна для вызова. 
Функция вычисляется достаточно долго, поэтому необходимо закэшировать уже ранее вычесленные значения для чисел х '''
n = int(input())
cash = dict() 
for i in range(n):
    item = int(input())
    if item not in cash:
        cash[item] = f(item)
    print(cash[item])

''' Напишите программу, которая считывает текст из файла (в файле может быть больше одной строки) и выводит самое частое слово в этом тексте и через пробел то, сколько раз оно встретилось. 
Если таких слов несколько, вывести лексикографически первое. В качестве ответа укажите вывод программы, а не саму программу. Слова, написанные в разных регистрах, считаются одинаковыми.
Пример: abc a bCd bC AbC BC BCD bcd ABC  -->  abc 3'''
from typing import Counter
with open('dataset.txt') as inf:
    arr = inf.read().replace('\n', '\x20').lower().split()  # считал все строки, заменил перенос строки на пробел, уменьшил регистр букв, разбил на список по пробелам

d = dict(Counter(arr))      # посчитал совпадения значений {key:value} и сменили тип получившегося объекта на тип - словарь
max_value = d[max(d, key = lambda k: d[k])]     # выяснил макимальное value в словаре
res_d = d.copy()
for i in d:  
    if d[i] != max_value:
        del res_d[i]                            # сделал новый словарь, удалив все ключи с не максимальным значением
res = min(res_d) + '\x20' + str(max_value)      # через пробел прописал ответ

with open("dataset.txt", 'w') as inf:
    inf.write(res)

#---------------- лучше:
all = open('dataset.txt', 'r')
s = all.read().lower().strip().split()
y = 0
m =''
for i in s:
    z = s.count(i)
    if z >= y:
        y = z
        m = i
print(m, y)